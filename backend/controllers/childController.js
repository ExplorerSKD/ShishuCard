const Child = require('../models/Child');
const VaccinationRecord = require('../models/VaccinationRecord');

// Get all children for a user
exports.getChildren = async (req, res) => {
  try {
    const children = await Child.find({ 
      parentEmail: req.currentUser.email,
      isActive: true 
    })
    .sort({ createdAt: -1 });
    
    // Add vaccination summaries
    const childrenWithSummaries = children.map(child => ({
      ...child.toObject(),
      vaccinationSummary: child.getVaccinationSummary()
    }));
    
    res.json({
      success: true,
      data: childrenWithSummaries,
      count: childrenWithSummaries.length
    });
  } catch (err) {
    console.error('Get children error:', err);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch children'
    });
  }
};

// Get a single child by ID
exports.getChild = async (req, res) => {
  try {
    const child = await Child.findOne({
      _id: req.params.id,
      parentEmail: req.currentUser.email
    });

    if (!child) {
      return res.status(404).json({
        success: false,
        error: 'Child not found'
      });
    }

    // Get vaccination records for this child
    const vaccinationRecords = await VaccinationRecord.find({ childId: child._id })
      .populate('vaccineId', 'name description')
      .sort({ dateAdministered: -1 });

    res.json({
      success: true,
      data: {
        ...child.toObject(),
        vaccinationRecords
      }
    });
  } catch (err) {
    console.error('Get child error:', err);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch child details'
    });
  }
};

// Create a new child
exports.createChild = async (req, res) => {
  try {
    const childData = {
      ...req.body,
      parentEmail: req.currentUser.email
    };

    // Create child - vaccination schedule will be auto-generated by pre-save hook
    const child = await Child.create(childData);

    // Add vaccination summary to response
    const childWithSummary = {
      ...child.toObject(),
      vaccinationSummary: child.getVaccinationSummary()
    };

    res.status(201).json({
      success: true,
      message: 'Child registered successfully with vaccination schedule',
      data: childWithSummary
    });
  } catch (err) {
    console.error('Create child error:', err);
    res.status(400).json({
      success: false,
      error: err.message || 'Failed to register child'
    });
  }
};

// Update a child
exports.updateChild = async (req, res) => {
  try {
    const child = await Child.findOneAndUpdate(
      { 
        _id: req.params.id,
        parentEmail: req.currentUser.email 
      },
      req.body,
      { 
        new: true,
        runValidators: true 
      }
    );

    if (!child) {
      return res.status(404).json({
        success: false,
        error: 'Child not found'
      });
    }

    res.json({
      success: true,
      message: 'Child updated successfully',
      data: child
    });
  } catch (err) {
    console.error('Update child error:', err);
    res.status(400).json({
      success: false,
      error: err.message || 'Failed to update child'
    });
  }
};

// Delete a child
exports.deleteChild = async (req, res) => {
  try {
    const child = await Child.findOneAndDelete({
      _id: req.params.id,
      parentEmail: req.currentUser.email
    });

    if (!child) {
      return res.status(404).json({
        success: false,
        error: 'Child not found'
      });
    }

    // Also delete all vaccination records for this child
    await VaccinationRecord.deleteMany({ childId: req.params.id });

    res.json({
      success: true,
      message: 'Child deleted successfully'
    });
  } catch (err) {
    console.error('Delete child error:', err);
    res.status(500).json({
      success: false,
      error: 'Failed to delete child'
    });
  }
};